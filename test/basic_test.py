"""
    Merge Unified API

    The unified API for building rich integrations with multiple integration platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""

import unittest

from MergePythonSDK.accounting.api.invoices_api import InvoicesApi
from MergePythonSDK.ats.api.candidates_api import CandidatesApi
from MergePythonSDK.crm.api.contacts_api import ContactsApi
from MergePythonSDK.hris.api.employees_api import EmployeesApi
from MergePythonSDK.shared import Configuration, ApiClient, ApiException
from MergePythonSDK.ticketing.api.tickets_api import TicketsApi


class BasicClientTest(unittest.TestCase):
    def setUp(self):
        self.configuration = Configuration()
        # Swap YOUR_API_KEY below with your production key from:
        # https://app.merge.dev/configuration/keys
        self.configuration.api_key['tokenAuth'] = 'REDACTED'
        self.configuration.api_key_prefix['tokenAuth'] = 'Bearer'

    def tearDown(self):
        pass

    def test_api_clients(self):
        with ApiClient(self.configuration) as api_client:
            # Accounting
            accounting_invoices_api_instance = InvoicesApi(api_client)
            accounting_x_account_token = 'REDACTED'

            # ATS
            ats_candidates_api_instance = CandidatesApi(api_client)
            ats_x_account_token = 'REDACTED'

            # CRM
            crm_contacts_api_instance = ContactsApi(api_client)
            crm_x_account_token = 'REDACTED'

            # HRIS
            hris_employees_api_instance = EmployeesApi(api_client)
            hris_x_account_token = 'REDACTED'

            # Ticketing
            ticketing_tickets_api_instance = TicketsApi(api_client)
            ticketing_x_account_token = 'REDACTED'

            # Accounting
            try:
                api_response = accounting_invoices_api_instance.invoices_list(accounting_x_account_token)
                assert api_response.get("results") is not None
            except ApiException as e:
                print('Exception when calling Accounting API: %s' % e)
                raise e

            # ATS
            try:
                api_response = ats_candidates_api_instance.candidates_list(ats_x_account_token)
                assert api_response.get("results") is not None
            except ApiException as e:
                print('Exception when calling ATS API: %s' % e)
                raise e

            # CRM
            try:
                api_response = crm_contacts_api_instance.contacts_list(crm_x_account_token)
                assert api_response.get("results") is not None

                # Test retrieve request
                first_contact = api_response.get("results")[0]
                contact_id = first_contact.id
                retrieve_first_contact = crm_contacts_api_instance.contacts_retrieve(crm_x_account_token, contact_id)
                assert retrieve_first_contact.id == first_contact.id
                assert retrieve_first_contact.first_name == first_contact.first_name
                assert retrieve_first_contact.last_name == first_contact.last_name
            except ApiException as e:
                print('Exception when calling CRM API: %s' % e)
                raise e

            # HRIS
            try:
                api_response = hris_employees_api_instance.employees_list(hris_x_account_token)
                assert api_response.get("results") is not None

                # Test pagination for requests and responses
                next_page = api_response.get("next")
                next_response = hris_employees_api_instance.employees_list(hris_x_account_token, cursor=next_page)
                assert next_response.get("results") is not None

                # Test remote fields
                _id = "PUT YOUR UUID HERE"
                employee_remote_field = hris_employees_api_instance.employees_retrieve(hris_x_account_token, _id,
                                                                                       remote_fields="gender")
                employee = hris_employees_api_instance.employees_retrieve(hris_x_account_token, _id)
                assert employee_remote_field.gender != employee.gender
                assert employee_remote_field.gender.lower() == employee.gender.lower()
            except ApiException as e:
                print('Exception when calling HRIS API: %s' % e)
                raise e

            # Ticketing
            try:
                # Test meta endpoint
                api_response = ticketing_tickets_api_instance.tickets_meta_post_retrieve(ticketing_x_account_token)
                assert api_response
                assert api_response.status.linked_account_status == "COMPLETE"
            except ApiException as e:
                print('Exception when calling Ticketing API: %s' % e)
                raise e


if __name__ == '__main__':
    unittest.main()
