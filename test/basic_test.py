"""
    Merge Unified API

    The unified API for building rich integrations with multiple integration platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""

import unittest

from MergePythonSDK.accounting.api.invoices_api import InvoicesApi
from MergePythonSDK.ats.api.candidates_api import CandidatesApi
from MergePythonSDK.crm.api.contacts_api import ContactsApi
from MergePythonSDK.hris.api.employees_api import EmployeesApi
from MergePythonSDK.shared.model.categories_enum import CategoriesEnum
from MergePythonSDK.shared import Configuration, ApiClient, ApiException
from MergePythonSDK.ticketing.api.linked_accounts_api import LinkedAccountsApi
from MergePythonSDK.ticketing.api.tickets_api import TicketsApi


class BasicClientTest(unittest.TestCase):
    def setUp(self):
        # Swap YOUR_ACCESS_KEY below with your production key from:
        # https://app.merge.dev/configuration/keys
        self.bearer_token = "YOUR_API_KEY"

    def tearDown(self):
        pass

    def test_api_clients(self):

        # Accounting
        accounting_configuration = Configuration()
        accounting_configuration.access_token = self.bearer_token
        accounting_configuration.api_key_prefix['tokenAuth'] = 'Bearer'
        # Swap YOUR_X_ACCOUNT_TOKEN below with your production key from:
        # https://app.merge.dev/linked-accounts/account/{ACCOUNT_ID}/overview
        accounting_configuration.api_key['accountTokenAuth'] = 'YOUR_X_ACCOUNT_TOKEN_HERE'
        with ApiClient(accounting_configuration) as api_client:
            accounting_invoices_api_instance = InvoicesApi(api_client)
            try:
                api_response = accounting_invoices_api_instance.invoices_list()
                assert api_response.get("results") is not None
            except ApiException as e:
                print('Exception when calling Accounting API: %s' % e)
                raise e

        # ATS
        ats_configuration = Configuration()
        ats_configuration.access_token = self.bearer_token
        ats_configuration.api_key_prefix['tokenAuth'] = 'Bearer'
        ats_configuration.api_key['accountTokenAuth'] = 'YOUR_X_ACCOUNT_TOKEN_HERE'
        with ApiClient(ats_configuration) as api_client:
            ats_candidates_api_instance = CandidatesApi(api_client)
            try:
                api_response = ats_candidates_api_instance.candidates_list()
                assert api_response.get("results") is not None
            except ApiException as e:
                print('Exception when calling ATS API: %s' % e)
                raise e

        # CRM
        crm_configuration = Configuration()
        crm_configuration.access_token = self.bearer_token
        crm_configuration.api_key_prefix['tokenAuth'] = 'Bearer'
        crm_configuration.api_key['accountTokenAuth'] = 'YOUR_X_ACCOUNT_TOKEN_HERE'
        with ApiClient(crm_configuration) as api_client:
            crm_contacts_api_instance = ContactsApi(api_client)
            try:
                api_response = crm_contacts_api_instance.contacts_list()
                assert api_response.get("results") is not None

                # Test retrieve request
                first_contact = api_response.get("results")[0]
                contact_id = first_contact.id
                retrieve_first_contact = crm_contacts_api_instance.contacts_retrieve(contact_id)
                assert retrieve_first_contact.id == first_contact.id
                assert retrieve_first_contact.first_name == first_contact.first_name
                assert retrieve_first_contact.last_name == first_contact.last_name
            except ApiException as e:
                print('Exception when calling CRM API: %s' % e)
                raise e

        # HRIS
        hris_configuration = Configuration()
        hris_configuration.access_token = self.bearer_token
        hris_configuration.api_key_prefix['tokenAuth'] = 'Bearer'
        hris_configuration.api_key['accountTokenAuth'] = 'YOUR_X_ACCOUNT_TOKEN_HERE'
        with ApiClient(hris_configuration) as api_client:
            hris_employees_api_instance = EmployeesApi(api_client)
            try:
                api_response = hris_employees_api_instance.employees_list()
                assert api_response.get("results") is not None

                # Test pagination for requests and responses
                next_page = api_response.get("next")
                next_response = hris_employees_api_instance.employees_list(cursor=next_page)
                assert next_response.get("results") is not None

                # Test remote fields
                _id = "YOUR_EMPLOYEE_ID_HERE"
                employee_remote_field = hris_employees_api_instance.employees_retrieve(_id, remote_fields="gender")
                employee = hris_employees_api_instance.employees_retrieve(_id)
                assert employee_remote_field.gender != employee.gender
                assert employee_remote_field.gender.lower() == employee.gender.lower()

                # Test expands
                employee_expands = hris_employees_api_instance.employees_retrieve(_id, expand="employments")
                assert employee_expands.employments.employee == employee_expands.id
            except ApiException as e:
                print('Exception when calling HRIS API: %s' % e)
                raise e

        # Ticketing
        ticketing_configuration = Configuration()
        ticketing_configuration.access_token = self.bearer_token
        ticketing_configuration.api_key_prefix['tokenAuth'] = 'Bearer'
        ticketing_configuration.api_key['accountTokenAuth'] = 'YOUR_X_ACCOUNT_TOKEN_HERE'
        with ApiClient(ticketing_configuration) as api_client:
            ticketing_tickets_api_instance = TicketsApi(api_client)
            try:
                # Test meta endpoint
                api_response = ticketing_tickets_api_instance.tickets_meta_post_retrieve()
                assert api_response
                assert api_response.status.linked_account_status == "COMPLETE"
            except ApiException as e:
                print('Exception when calling Ticketing API: %s' % e)
                raise e

        # Test ENUM serialization
        ticketing_category = CategoriesEnum("ticketing")
        assert ticketing_category.value == "ticketing"

        # List LinkedAccounts test enum serialization and deserialization
        api_client = ApiClient(ticketing_configuration)
        linked_account_api_instance = LinkedAccountsApi(api_client)
        api_response = linked_account_api_instance.linked_accounts_list(category=ticketing_category.value).results
        assert api_response[0].category == CategoriesEnum("ticketing").value


if __name__ == '__main__':
    unittest.main()
